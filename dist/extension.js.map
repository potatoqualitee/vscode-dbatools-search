{"version":3,"sources":["webpack://search/./src/utils/getSelectedText.ts","webpack://search/./src/utils/index.ts","webpack://search/./src/utils/searcher.ts","webpack://search/external \"vscode\"","webpack://search/webpack/bootstrap","webpack://search/./src/extension.ts"],"names":["activeEditor","vscode","window","activeTextEditor","activeSelection","selection","isEmpty","cursorPosition","start","wordRange","document","getWordRangeAtPosition","highlight","getText","console","debug","documentText","selStartOffset","offsetAt","selEndOffset","end","selectedText","slice","trim","replace","template","getSelectedText","uriText","encodeURI","queryTemplate","workspace","getConfiguration","get","query","commands","executeCommand","Uri","parse","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","context","subscriptions","push","registerTextEditorCommand","searcher","registerCommand"],"mappings":"kHACA,eAEA,6BACC,MAAMA,EAAeC,EAAOC,OAAOC,iBAC7BC,EAAkBJ,EAAcK,UAEtC,GAAID,EAAgBE,QAAS,CAC5B,IAAIC,EAAiBP,EAAcK,UAAUG,MACzCC,EAAYT,EAAcU,SAASC,uBAAuBJ,GAC1DK,EAAYZ,EAAcU,SAASG,QAAQJ,GAI/C,OAFAK,QAAQC,MAAM,+CAA+CH,KAEtDA,EAGR,MAAMI,EAAehB,EAAcU,SAASG,UAC5C,IAAKG,EAEJ,OADAF,QAAQC,MAAM,qBACP,GAGR,MAAME,EAAiBjB,EAAcU,SAASQ,SAASd,EAAgBI,OACjEW,EAAenB,EAAcU,SAASQ,SAASd,EAAgBgB,KAErE,IAAIC,EAAeL,EAAaM,MAAML,EAAgBE,GAAcI,OAIpE,OAHAF,EAAeA,EAAaG,QAAQ,SAAU,KAC9CV,QAAQC,MAAM,oBAAoBM,KAE3BA,I,8YC9BR,a,iFCAA,eACA,SAEA,oBAAyBI,GACxB,IAAIJ,EAAe,EAAAK,kBAEnB,IAAKL,EACH,OAGF,IAAIM,EAAUC,UAAUP,GAExB,MACMQ,EAFO5B,EAAO6B,UAAUC,iBAAiB,UAEbC,IAAI,iBAAiBP,KACvD,IAAIQ,EAAQJ,EAAcL,QAAQ,iBAAkBG,GACpDb,QAAQC,MAAM,YAAYc,KACvB5B,EAAOiC,SAASC,eAAe,cAAelC,EAAOmC,IAAIC,MAAMJ,M,QChBnEK,EAAOC,QAAUC,QAAQ,YCCrBC,EAA2B,GAG/B,SAASC,EAAoBC,GAE5B,IAAIC,EAAeH,EAAyBE,GAC5C,QAAqBE,IAAjBD,EACH,OAAOA,EAAaL,QAGrB,IAAID,EAASG,EAAyBE,GAAY,CAGjDJ,QAAS,IAOV,OAHAO,EAAoBH,GAAUI,KAAKT,EAAOC,QAASD,EAAQA,EAAOC,QAASG,GAGpEJ,EAAOC,Q,uGCrBf,eACA,SAEA,oBAAyBS,GACxBA,EAAQC,cAAcC,KAAKjD,EAAOiC,SAASiB,0BAA0B,wBAAwB,KAC5F,EAAAC,SAAS,YAEVJ,EAAQC,cAAcC,KAAKjD,EAAOiC,SAASiB,0BAA0B,0BAAyB,KAC7F,EAAAC,SAAS,cAEVJ,EAAQC,cAAcC,KAAKjD,EAAOiC,SAASiB,0BAA0B,4BAA2B,KAC/F,EAAAC,SAAS,gBAEVJ,EAAQC,cAAcC,KAAKjD,EAAOiC,SAASiB,0BAA0B,yBAAwB,KAC5F,EAAAC,SAAS,qBAEVJ,EAAQC,cAAcC,KAAKjD,EAAOiC,SAASiB,0BAA0B,wBAAuB,KAC3F,EAAAC,SAAS,kBAEVJ,EAAQC,cAAcC,KAAKjD,EAAOiC,SAASiB,0BAA0B,0BAAyB,KAC7F,EAAAC,SAAS,cAEVJ,EAAQC,cAAcC,KAAKjD,EAAOiC,SAASiB,0BAA0B,2BAA2B,KAC/F,EAAAC,SAAS,eAEVJ,EAAQC,cAAcC,KAAKjD,EAAOiC,SAASiB,0BAA0B,6BAA6B,KACjG,EAAAC,SAAS,iBAEVJ,EAAQC,cAAcC,KAAKjD,EAAOiC,SAASmB,gBAAgB,mCAAmC,KAC7FpD,EAAOiC,SAASC,eAAe,qCAIjC,2B","file":"extension.js","sourcesContent":["\r\nimport * as vscode from 'vscode';\r\n\r\nexport function getSelectedText(): string {\r\n\tconst activeEditor = vscode.window.activeTextEditor;\r\n\tconst activeSelection = activeEditor!.selection;\r\n\r\n\tif (activeSelection.isEmpty) {\r\n\t\tlet cursorPosition = activeEditor!.selection.start;\r\n\t\tlet wordRange = activeEditor!.document.getWordRangeAtPosition(cursorPosition);\r\n\t\tlet highlight = activeEditor!.document.getText(wordRange);\r\n\r\n\t\tconsole.debug(`no explicitly selected text. highlighted on ${highlight}`);\r\n\r\n\t\treturn highlight;\r\n\t}\r\n\r\n\tconst documentText = activeEditor!.document.getText();\r\n\tif (!documentText) {\r\n\t\tconsole.debug(\"bailed on getText\");\r\n\t\treturn '';\r\n\t}\r\n\r\n\tconst selStartOffset = activeEditor!.document.offsetAt(activeSelection.start);\r\n\tconst selEndOffset = activeEditor!.document.offsetAt(activeSelection.end);\r\n\r\n\tvar selectedText = documentText.slice(selStartOffset, selEndOffset).trim();\r\n\tselectedText = selectedText.replace(/\\s\\s+/g, ' ');\r\n\tconsole.debug(`selected text is ${selectedText}`);\r\n\r\n\treturn selectedText;\r\n}","export * from './searcher';\r\n","import * as vscode from 'vscode';\r\nimport { getSelectedText } from './getSelectedText';\r\n\r\nexport function searcher(template: string) {\r\n\tvar selectedText = getSelectedText();\r\n\r\n\tif (!selectedText) {\r\n\t  return;\r\n\t}\r\n  \r\n\tvar uriText = encodeURI(selectedText);\r\n\tvar search = vscode.workspace.getConfiguration(\"search\");\r\n\tconst qt = `queryTemplate.${template}`;\r\n\tconst queryTemplate: any = search.get(`queryTemplate.${template}`);\r\n\tvar query = queryTemplate.replace(\"-searchphrase-\", uriText);\r\n\tconsole.debug(`query is ${queryTemplate}`);\r\n    vscode.commands.executeCommand('vscode.open', vscode.Uri.parse(query));\r\n  }","module.exports = require(\"vscode\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\r\nimport { searcher } from './utils';\r\n\r\nexport function activate(context: vscode.ExtensionContext) {  \r\n\tcontext.subscriptions.push(vscode.commands.registerTextEditorCommand(\"extension.docsSearch\", () => {\r\n\t\tsearcher(\"Docs\");\r\n\t  }));\r\n\tcontext.subscriptions.push(vscode.commands.registerTextEditorCommand(\"extension.googleSearch\",() => {\r\n\t\tsearcher(\"Google\");\r\n\t  }));\r\n\tcontext.subscriptions.push(vscode.commands.registerTextEditorCommand(\"extension.dbatoolsSearch\",() => {\r\n\t\tsearcher(\"dbatools\");\r\n\t  }));\r\n\tcontext.subscriptions.push(vscode.commands.registerTextEditorCommand(\"extension.stackSearch\",() => {\r\n\t\tsearcher(\"Stackoverflow\");\r\n\t  }));\r\n\tcontext.subscriptions.push(vscode.commands.registerTextEditorCommand(\"extension.duckSearch\",() => {\r\n\t\tsearcher(\"Duckduckgo\");\r\n\t  }));\r\n\tcontext.subscriptions.push(vscode.commands.registerTextEditorCommand(\"extension.thwackSearch\",() => {\r\n\t\tsearcher(\"Thwack\");\r\n\t  }));\r\n\tcontext.subscriptions.push(vscode.commands.registerTextEditorCommand(\"extension.technetSearch\", () => {\r\n\t\tsearcher(\"Technet\");\r\n\t  }));\r\n\tcontext.subscriptions.push(vscode.commands.registerTextEditorCommand(\"extension.vscodeApiSearch\", () => {\r\n\t\tsearcher(\"VSCodeAPI\");\r\n\t  }));\r\n\tcontext.subscriptions.push(vscode.commands.registerCommand('extension.vscodeWorkspaceSearch', () => {\r\n\t\tvscode.commands.executeCommand('workbench.action.findInFiles');\r\n\t}));\r\n}\r\n\r\nexport function deactivate() {}"],"sourceRoot":""}